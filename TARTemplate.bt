//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: TARTemplate.bt
// Author: Sebastian Bachmann
// Revision: v0.1
// Purpose: Read TAR Files
//--------------------------------------

int64 OctalFilesizeStringToInt(char str[]){
    local int64 x;
    local int i;
    x = 0;
    for (i = 0; i <= 10; i++ ){
        x += ((str[10-i]-0x30) * Pow(8, i)); 
    }
    return x;
}

struct TAR_ENTRY {
                          /* byte offset */
        char name[100];               /*   0 */
        char mode[8];                 /* 100 */
        char uid[8];                  /* 108 */
        char gid[8];                  /* 116 */
        char size[12];                /* 124 */
        char mtime[12];               /* 136 */
        char chksum[8];               /* 148 */
        char typeflag;                /* 156 */
        char linkname[100];           /* 157 */
        char magic[6];                /* 257 */
        char version[2];              /* 263 */
        char uname[32];               /* 265 */
        char gname[32];               /* 297 */
        char devmajor[8];             /* 329 */
        char devminor[8];             /* 337 */
        char prefix[155];             /* 345 */
                                      /* 500 */
};
local int64 len;
while (!FEof()){
    SetBackColor( cLtGray );
    TAR_ENTRY entry;
    SetBackColor(cNone);
    // 12 bytes padding
    FSkip(12);
    SetBackColor(cLtRed);
    len = OctalFilesizeStringToInt(entry.size);

    Printf("%d ... %d\n", FTell(), len);

    SetBackColor(cNone);
    if (len > 0){
        FSkip(len);
        // consider 512 byte long blocks...
        if (len % 512 != 0){
            FSkip(512 - (len % 512));
        }
    }
}
